}
for (level in levels(sces$gene)){
print(level)
tmp = filter(sces,gene==level)
tmp = filter(tmp,width<25000)
assign(level,select(tmp,c(seqnames,start,end,gene)))
}
A=BLM
A=GRanges(BLM)
B=read.table("../Enrichment/Genes_G4s/G4_K_genes.bed")
colnames(B)
colnames(B)=c("seqnames","start","end","width","type")
colnames(B)=c("seqnames","start","end","width")
B=GRanges(B)
B
A
sces= read.table("../fucci_sces.bed",header=T)%>%select(c(seqnames,start,end,gene,width))
View(sces)
sces= read.table("../fucci_sces.bed",header=T)%>%select(c(seqnames,start,end,gene,width))
sces$gene=gsub(x = sces$gene,pattern = "/",replacement = "_")
sces$gene=as.factor(sces$gene)
for (level in levels(sces$gene)){
print(level)
tmp = filter(sces,gene==level)
tmp = filter(tmp,width<25000)
assign(level,select(tmp,c(seqnames,start,end,gene)))
}
A=GRanges(BLM)
B=read.table("../Enrichment/Genes_G4s/G4_K_genes.bed")
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
View(B)
A
B
numOverlaps(A, B, count.once=TRUE)
numOverlaps(randomizeRegions(A), B, count.once=TRUE)
pt <- overlapPermTest(A=A, B=B, ntimes=50)
plot(pt)
pt <- overlapPermTest(A=A, B=B, ntimes=1000)
plot(pt)
pt
pt$numOverlaps$permuted
pt$numOverlaps$observed
null=data.frame(Overlaps=pt$numOverlaps$permuted,gene="BLM")
true=data.frame(Overlaps=pt$numOverlaps$observed,gene="BLM"
View(null)
View(null)
true=data.frame(Overlaps=pt$numOverlaps$observed,gene="BLM")
level("BLM")
level="BLM"
GRanges(level)
GRanges(get(level))
null=data.frame()
true=data.frame()
for (level in c("BLM","RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
View(null)
View(true)
for (level in c("BLM","RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
null=data.frame()
true=data.frame()
for (level in c("BLM","RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
View(true)
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 19) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment")
View(null)
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment")
sces$gene
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","RTEL1","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=100)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment")
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=100)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment")
annos= list.files("/Users/zeidh/Desktop/THESIS/Enrichment/Genes_G4s/",full.names = T)
file=annos[1]
B=read.table(file)
View(B)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
View(B)
B
basename(file)
file=annos[1]
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=100)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = basename(file))+
ggsave(paste0(basename(file),".png")
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = basename(file))+
ggsave(paste0(basename(file),".png"))
strsplit(x=basename(file),by=".")
strsplit(x=basename(file),by="[.]")
strsplit(x=basename(file),"[.]")
strsplit(x=basename(file),"[.]")[[1]]
strsplit(x=basename(file),"[.]")[[1]][1]
strsplit(strsplit(x=basename(file),"[.]")[[1]][1],"_")
strsplit(strsplit(x=basename(file),"[.]")[[1]][1],"_")[[1]]
annos= list.files("/Users/zeidh/Desktop/THESIS/Enrichment/Genes_G4s/",full.names = T)
for (file in annos){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=100)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("EnrichmentPlots/",basename(file),".png"))
}
for (file in annos){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=1000)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("EnrichmentPlots/",basename(file),".png"))
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("EnrichmentPlots/",basename(file),".png"))
paste0("EnrichmentPlots/",basename(file),".png")
paste0("EnrichmentPlots/",basename(file),"[.]")[[1]][1],".png")
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
cl
no_cores <- detectCores() - 6
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(i=10:10000) %dopar% getPrimeNumbers(i)
par = function(file){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=1000)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("/Users/zeidh/Desktop/THESIS/Enrichment/EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
}
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(i=annos) %dopar% par(i)
par = function(file){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("/Users/zeidh/Desktop/THESIS/Enrichment/EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
}
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(i=annos) %dopar% par(i)
annos
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(file=annos) %dopar% par(file)
stopCluster(cl)
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(file=annos) %dopar% par(file)
annos= list.files("/Users/zeidh/Desktop/THESIS/Enrichment/Genes_G4s/",full.names = T)
for (file in annos){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("/Users/zeidh/Desktop/THESIS/Enrichment/EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
}
stopCluster(cl)
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
foreach(file=annos) %dopar% par(file)
stopCluster(cl)
library(rtracklayer)
library(tidyverse)
library(dplyr)
library(plyr)
library(tidyr)
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(GenomicRanges))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(GenomicAlignments))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(DNAcopy))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(doParallel))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(tiydyverse))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(ggplot2))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(cowplot))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(caTools))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(gplots))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(ReorderCluster))))
suppressMessages(suppressPackageStartupMessages(suppressWarnings(require(BiocManager))))
cutoff=1000
file = "/Users/zeidh/Desktop/binsize_1e+06_PE_CNV.bed.gz"
copyNumberFinder <- function(cutoff, file){
CNV<- import(file)
cnvPerCell<-data.frame()
cnvPerCellSummary=data.frame()
for (i in 1:length(CNV)){
## ASSIGN GENOTYPE BASED OFF FILE NAME
file=strsplit(CNV[i]@listData[[1]]@metadata$trackLine@description,split = " ")[[1]][4]
message("Reading file: ",file," ... ",round((i/length(CNV))*100,2),"%")
## RETRIEVE FIRST LIBRARY AND REMOVE SMALL SEGMENTS < 500Kb and HIGH PLOIDY STATES TO ASSIGN  PLOIDY
tmp <- as.data.frame(CNV[i])
tmp$name <- as.factor(tmp$name)
tmp=tmp[tmp$width>100000,]
tmp=tmp[tmp$seqnames!="chrY",]
#HIGH PLOIDY STATES
tmp <- tmp[tmp$name!="20-somy" & tmp$name!="19-somy" &tmp$name!="18-somy" &tmp$name!="17-somy" & tmp$name!="16-somy" &tmp$name!="15-somy" &tmp$name!="14-somy"&tmp$name!="13-somy" &tmp$name!="12-somy"&tmp$name!="11-somy"&tmp$name!="10-somy"&tmp$name!="zero-inflation",]
tmp$name <-droplevels(tmp$name)
## BUILD PLOIDY TABLE SUMMARY TO CLASSIFY NATIVE STATE AND GAINS & LOSSES
ploidyTable <- tmp %>% group_by(name) %>% dplyr::summarize(n(),sum=sum(width))
ploidy = as.numeric(strsplit(as.character(ploidyTable[which.max(ploidyTable$sum),]$name),split = "[-]")[[1]][1])
if (ploidy==0){
ploidy=1
} else if (ploidy >2){
next
}
## REMOVE SMALL SEGMENTS  AFFTER HAVING  ASSIGNED PLOIDY  STATE
tmp=tmp[tmp$width>cutoff,]
ploidyTable <- tmp %>% group_by(name) %>% dplyr::summarize(n(),sum=sum(width))
## TURN PLOIDY INTO NUMERIC AND CLASSIFY  GAINS/LOSSES
ploidyTable=  separate(ploidyTable,col = name,sep="-",into = c("name"))
ploidyTable$name<- as.numeric(ploidyTable$name)
ploidyTable =  ploidyTable[ploidyTable$name!=ploidy,]
ploidyTable$type =  ifelse(ploidyTable$name < ploidy, "loss", ifelse((ploidyTable$name > ploidy), "gain", "unclear"))
## REPEAT FOR WHOLE DF
tmp=  separate(tmp,col = name,sep="-",into = c("name"))
tmp$name<- as.numeric(tmp$name)
tmp =  tmp[tmp$name!=ploidy,]
tmp$type =  ifelse(tmp$name < ploidy, "loss", ifelse((tmp$name > ploidy), "gain", "unclear"))
## QUANTIFY GAINS/LOSSES
totalGain= sum(filter(ploidyTable,type=="gain")$sum)
totalGainSeg = sum(filter(ploidyTable,type=="gain")$`n()`)
totalLoss= sum(filter(ploidyTable,type=="loss")$sum)
totalLossSeg = sum(filter(ploidyTable,type=="loss")$`n()`)
#SUMMARY STATS
row <- data.frame(ID=file,ploidy=ploidy,gainSeg=totalGainSeg,totalGain=totalGain,lossSeg=totalLossSeg,totalLoss=totalLoss,file=file)
cnvPerCellSummary <- rbind(row,cnvPerCellSummary)
#SUMMARIZE INDIVIDUAL EVENTS
df = tmp %>% select(c(seqnames,start,end,width,name,type))
if (nrow(df)>0){
df$file=file
df$ploidy=ploidy
df$gene=file
cnvPerCell<- rbind(df,cnvPerCell)
}
}
write.table(cnvPerCell,file = paste0("/Users/zeidh/Desktop/THESIS/CNAs/",cutoff/10000,"cnvPerCell.txt"),quote = F,row.names = F,col.names = T,sep = "\t")
write.table(cnvPerCellSummary,paste0("/Users/zeidh/Desktop/THESIS/CNAs/",cutoff/10000,"cnvPerCellSummary.txt"),quote = F,row.names = F,col.names = T,sep = "\t")
}
copyNumberFinder(10000000,file)
cnvPerCell=read.table("/Users/zeidh/Desktop/THESIS/CNAs/1000cnvPerCell.txt",header=T)
gains <- dplyr::filter(cnvPerCell,cnvPerCell$type=="gain")
gains$file<-as.factor(gains$file)
cnvpath=paste0("/Users/zeidh/Desktop/THESIS/CNAs/Duplications/")
if (!file.exists(cnvpath) ) { dir.create(cnvpath)}
file=annos[1]
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=10)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("/Users/zeidh/Desktop/THESIS/Enrichment/EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
par = function(file){
B=read.table(file)
colnames(B)=c("seqnames","start","end","width")
B$seqnames=paste0("chr",B$seqnames)
B=GRanges(B)
null=data.frame()
true=data.frame()
for (level in c("BLM","BLM_RECQL5","RECQL1","RECQL5","WRN","WRN_RECQL5","WT")){
A=GRanges(get(level))
pt <- overlapPermTest(A=A, B=B, ntimes=5)
tmp1=data.frame(Overlaps=pt$numOverlaps$permuted,gene=level)
tmp1$enrich = tmp1$Overlaps/mean(tmp1$Overlaps)
tmp2=data.frame(Overlaps=pt$numOverlaps$observed,gene=level)
tmp2$enrich=tmp2$Overlaps/mean(tmp1$Overlaps)
null=rbind(tmp1,null)
true=rbind(tmp2,true)
}
ggplot(null)+geom_violin(aes(gene,enrich,fill=gene),lwd=0.9) +
geom_boxplot(width=0.05,aes(gene,enrich),lwd=0.9) +
#scale_fill_manual(values=c("#53b0db","#53b0db","#53b0db","#6ceb70"))+
theme_classic(base_size = 15) +
geom_point(data=true,aes(gene,enrich),fill="red",colour="black",pch=21, size=5)+
theme(legend.position = "none")  +
labs(x="Cells",y="Enrichment",title = strsplit(x=basename(file),"[.]")[[1]][1])+
ggsave(paste0("/Users/zeidh/Desktop/THESIS/Enrichment/EnrichmentPlots/",strsplit(x=basename(file),"[.]")[[1]][1],".png"))
}
no_cores <- detectCores() - 4
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
foreach(file=annos) %dopar% par(file)
stopCluster(cl)
cl
no_cores
